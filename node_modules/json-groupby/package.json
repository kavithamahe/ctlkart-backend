{
  "_from": "json-groupby",
  "_id": "json-groupby@1.1.0",
  "_inBundle": false,
  "_integrity": "sha1-evXg7XARjdIepB+pL6dTZfl59Vo=",
  "_location": "/json-groupby",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "json-groupby",
    "fetchSpec": "latest",
    "name": "json-groupby",
    "raw": "json-groupby",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/json-groupby/-/json-groupby-1.1.0.tgz",
  "_shasum": "7af5e0ed70118dd21ea41fa92fa75365f979f55a",
  "_shrinkwrap": null,
  "_spec": "json-groupby",
  "_where": "D:\\kavi\\mysql\\ctlkart",
  "author": {
    "email": "gaganbansal123@gmail.com",
    "name": "Gagan Bansal"
  },
  "bugs": {
    "url": "https://github.com/gagan-bansal/json-groupby/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Group array of json based on associated properties.",
  "devDependencies": {
    "browserify": "^13.0.0",
    "chai": "^3.5.0",
    "chance": "^1.0.2",
    "exorcist": "^0.4.0",
    "mocha": "^2.4.5",
    "uglify-js": "^2.6.1"
  },
  "homepage": "https://github.com/gagan-bansal/json-groupby",
  "keywords": [
    "categories",
    "classify",
    "geojson",
    "group",
    "group-by",
    "json"
  ],
  "license": "MIT",
  "main": "json-groupby.js",
  "name": "json-groupby",
  "optionalDependencies": {},
  "readme": "# json-groupby\nGroup array of JSON objects based on associated properties.\n\nIt also groups objects containing [nested arrays](#nested-arrays).\n\n## installation\n\n```\nnpm install json-groupby\n```\n\n## usage\n\n```javascript\nvar groupBy = require('json-groupby')\nvar group = groupBy(array, properties [, collect])\n```\n* **array**  Array of JSON objects\n* **properties**  Array JSON properties' path like `address.city` or lookup object\n\n  **lookup**\n  ```\n  {\n    intervals: array of numbers\n    ,property: string\n    [,labels: array of string]\n  }\n  ``` \n  **intervals** Array of intervals. Like [ 10, 20, 30, 40, 50] group the data in four ranges, whereas lower bound is inclusive and upper bound is exclusive.\n\n  **peroperty** Property path like `price`\n\n  **labels** Array of interval labels like [ 'low', 'medium', 'high']\n\n* **collect** Array of properties that need to be collected in array \n\n### examples\n\n#### data set\n\n```javascript\nvar products = \n [{\"id\": 1,\n   \"product\": \"ri\", \"price\": 16, \"color\": \"green\", \"available\": false,\n   \"tags\": [\"bravo\"],\n   \"vendor\": {\"name\": \"Donald Chambers\", \"address\": {\"city\": \"Mumbai\"}}},\n  {\"id\": 2,\n   \"product\": \"foef\", \"price\": 44, \"color\": \"yellow\", \"available\": false,\n   \"tags\": [\"alpha\"],\n   \"vendor\": {\"name\": \"Barbara Garrett\", \"address\": {\"city\": \"Mumbai\"}}},\n  {\"id\": 3,\n   \"product\": \"jehnojto\", \"price\": 29, \"color\": \"red\", \"available\": true,\n   \"tags\": [\"alpha\"],\n   \"vendor\": {\"name\": \"Anne Leonard\", \"address\": {\"city\": \"New York\"}}},\n  {\"id\": 4,\n   \"product\": \"ru\", \"price\": 35, \"color\": \"yellow\", \"available\": false,\n   \"tags\": [\"echo\", \"charlie\", \"bravo\"],\n   \"vendor\": {\"name\": \"Justin Doyle\", \"address\": {\"city\": \"London\"}}},\n  {\"id\": 5,\n   \"product\": \"pihluve\", \"price\": 47, \"color\": \"green\", \"available\": true,\n   \"tags\": [\"delta\", \"echo\", \"bravo\"],\n   \"vendor\": {\"name\": \"Emily Abbott\", \"address\": {\"city\": \"New York\"}}},\n  {\"id\": 6,\n   \"product\": \"dum\", \"price\": 28, \"color\": \"green\", \"available\": true,\n   \"tags\": [\"echo\", \"delta\", \"charlie\"],\n   \"vendor\": {\"name\": \"Henry Peterson\", \"address\": {\"city\": \"New York\"}}},\n  {\"id\": 7,\n   \"product\": \"zifpeza\", \"price\": 10, \"color\": \"green\", \"available\": false,\n   \"tags\": [\"echo\", \"charlie\", \"bravo\"],\n   \"vendor\": {\"name\": \"Jesus Lowe\", \"address\": {\"city\": \"Mumbai\"}}},\n  {\"id\": 8,\n   \"product\": \"av\", \"price\": 39, \"color\": \"green\", \"available\": true,\n   \"tags\": [\"bravo\"],\n   \"vendor\": {\"name\": \"Rosalie Erickson\", \"address\": {\"city\": \"New York\"}}}]\n\n```\n\n\n#### group by single property\n\n```javascript\ngroupBy(products, ['color'], ['id'])\n// output is \n{ green: { id: [ 1, 5, 6, 7, 8 ] },\n  yellow: { id: [ 2, 4 ] },\n  red: { id: [ 3 ] } }\n```\n\n#### group by many properties and without collect option\n\n```javascript\ngroupBy(products, ['available', 'color', 'vendor.address.city'])\n// output is \n{\"false\": \n  {\"green\": \n    {\"Mumbai\": [\n      {\"id\": 1, \"product\": \"ri\", \"price\": 16, \"color\": \"green\", \n       \"available\": false, \"tags\": [\"bravo\"], \n       \"vendor\": {\"name\": \"Donald Chambers\",  \"address\": {\"city\": \"Mumbai\"}}},\n      {\"id\": 7, \"product\": \"zifpeza\", \"price\": 10, \"color\": \"green\",\n       \"available\": false, \"tags\": [\"echo\", \"charlie\", \"bravo\"],\n       \"vendor\": {\"name\": \"Jesus Lowe\", \"address\": {\"city\": \"Mumbai\"}}}]},\n   \"yellow\": {\n     \"Mumbai\": [\n       {\"id\": 2, \"product\": \"foef\", \"price\": 44, \"color\": \"yellow\", \n        \"available\": false, \"tags\": [\"alpha\"], \n        \"vendor\": {\"name\": \"Barbara Garrett\",  \"address\": {\"city\": \"Mumbai\"}}}], \n     \"London\": [\n       {\"id\": 4, \"product\": \"ru\", \"price\": 35, \"color\": \"yellow\",\n        \"available\": false, \"tags\": [\"echo\", \"charlie\", \"bravo\"],\n        \"vendor\": {\"name\": \"Justin Doyle\", \"address\": {\"city\": \"London\"}}}]}},\n \"true\": \n  {\"red\": \n    {\"New York\": [\n      {\n        \"id\": 3, \"product\": \"jehnojto\", \"price\": 29, \"color\": \"red\",\n        \"available\": true, \"tags\": [\"alpha\"],\n        \"vendor\": {\"name\": \"Anne Leonard\", \"address\": {\"city\": \"New York\"}}}]},\n   \"green\": {\n     \"New York\": [\n        {\"id\": 5, \"product\": \"pihluve\", \"price\": 47, \"color\": \"green\",\n         \"available\": true, \"tags\": [\"delta\", \"echo\", \"bravo\"],\n         \"vendor\": {\"name\": \"Emily Abbott\", \"address\": {\"city\": \"New York\"}}},\n         {\"id\": 6, \"product\": \"dum\", \"price\": 28, \"color\": \"green\",\n         \"available\": true, \"tags\": [\"echo\", \"delta\", \"charlie\"],\n         \"vendor\": {\"name\": \"Henry Peterson\", \"address\": {\"city\": \"New York\"}}},\n         {\"id\": 8, \"product\": \"av\", \"price\": 39, \"color\": \"green\",\n         \"available\": true, \"tags\": [\"bravo\"],\n         \"vendor\": {\"name\": \"Rosalie Erickson\", \"address\": {\"city\": \"New York\"}}}\n     ]}}}\n``` \n\n#### single deep path property\n \n```javascript\ngroupBy(products, ['vendor.address.city'], ['id'])\n// output is \n{ Mumbai: { id: [ 1, 2, 7 ] },\n  'New York': { id: [ 3, 5, 6, 8 ] },\n  London: { id: [ 4 ] } }\n```   \n\n#### group with boolean property\n\n```javascript\ngroupBy(products, ['available'], ['id'])\n// output is \n{ false: { id: [ 1, 2, 4, 7 ] }, \n  true: { id: [ 3, 5, 6, 8 ] }}\n```  \n\n#### group by intervals (lookup of intervals) without intervals' name\n\n```javascript \ngroupBy(\n  products, \n  [{property: 'price', intervals: [10,20,40,50]}],\n  ['id'])\n//output is \n{ '0': { id: [ 1, 7 ] },\n  '1': { id: [ 3, 4, 6, 8 ] },\n  '2': { id: [ 2, 5 ] } }\n``` \n\n#### group by intervals (lookup of intervals) with intervals' lable name \n\n```javascript\ngroupBy(\n  products, \n  [{\n    property: 'price', \n    intervals: [10,20,40,50], \n    labels: ['low','medium','high']}],\n  ['id'])\n//ouptu is \n{'low': { id: [ 1, 7 ] },\n 'medium': { id: [ 3, 4, 6, 8 ] },\n 'high': { id: [ 2, 5 ] } }\n```\n#### group with mixed properties lookup and property path \n\n```javascript\ngroupBy(\n  products, \n  [\n    {\n      property: 'price', \n      intervals: [10,20,40,50], \n      labels: ['low','medium','high']\n    },\n    'vendor.address.city'\n  ],\n  ['id'])\n// output is\n{\n  \"low\":\n    {\"Mumbai\":{\"id\":[1,7]}},\n  \"high\":\n    {\"Mumbai\":{\"id\":[2]},\n    \"New York\":{\"id\":[5]}},\n  \"medium\":\n    {\"New York\":{\"id\":[3,6,8]},\n    \"London\":{\"id\":[4]}}\n```\n\n#### group by tags that are in array \n\n```javascript\ngroupBy(products, ['tags'], ['id'])\n//ouput is\n{ bravo: { id: [ 1, 4, 5, 7, 8 ] },\n  alpha: { id: [ 2, 3 ] },\n  echo: { id: [ 4, 5, 6, 7 ] },\n  charlie: { id: [ 4, 6, 7 ] },\n  delta: { id: [ 5, 6 ] } }\n```\n\n#### group and collect many properties\n\n```javascript\ngroupBy(\n  products, \n  ['color'], \n  ['vendor.address.city', 'available'])\n// output is\n{ green: \n   { 'vendor.address.city': [ 'Mumbai', 'New York', 'New York', 'Mumbai', 'New York' ],\n     available: [ false, true, true, false, true ] },\n  yellow: \n   { 'vendor.address.city': [ 'Mumbai', 'London' ],\n     available: [ false, false ] },\n  red: { 'vendor.address.city': [ 'New York' ], available: [ true ] } }\n```\n\n#### Nested Arrays\n\nGroup by property path that lies in nested arrays, in the following example `addresses.localities.size`\n\n```javascript\nvar vendors = [{\n  id: 1,\n  addresses : [{\n    city: 'a',\n    localities: [\n      {size: \"small\", zipcode: '12345', storeType: ['electronic', 'food']},\n      {size: \"medium\", zipcode: '12346', storeType: ['food']}]\n  }, {\n    city: 'b',\n    localities: [\n      {size: \"medium\", zipcode: '12345', storeType: ['electronic', 'food']},\n      {size: \"small\", zipcode: '12347', storeType: ['electronic']}]\n  }],\n  details: {\n    name: 'foo', \n    items: 400, \n    rating: 'high'}\n}, {\n  id: 2,\n  addresses : [{\n    city: 'a',\n    localities: [\n      {size: \"large\", zipcode: '12345', storeType: ['apparel', 'furniture']},\n      {size: \"small\", zipcode: '12346', storeType: ['furniture']}]\n  }, {\n    city: 'b',\n    localities: [\n      {size: \"small\", zipcode: '12345', storeType: ['food', 'furniture']},\n      {size: \"medium\", zipcode: '12347', storeType: ['food']}]\n  }],\n  details: {\n    name: 'bar', \n    items: 500, \n    rating: 'low'}\n}]\n\nvar group = groupBy(vendors, ['addresses.localities.size'], ['id'])\n\n// output gruop is\n{\n  \"small\": {id: [1, 2]},\n  \"medium\": {id: [1, 2]},\n  \"large\": {id: [2]}\n}\n\n``` \n## developing\nOnce you run\n \n```npm isntall```\n\nthen for running test \n\n```npm run test```\n\nto create build\n\n```npm run build```\n\n## license\nThis project is licensed under the terms of the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gagan-bansal/json-groupby.git"
  },
  "scripts": {
    "build": "npm run build-debug && npm run build-min",
    "build-debug": "browserify json-groupby.js --debug --standalone JSONGroupBy | exorcist dist/json-groupby.js.map > dist/json-groupby.js",
    "build-min": "browserify json-groupby.js --standalone JSONGroupBy | uglifyjs -c -m > dist/json-groupby.min.js",
    "test": "mocha test/test.js"
  },
  "version": "1.1.0"
}
