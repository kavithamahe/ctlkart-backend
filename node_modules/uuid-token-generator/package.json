{
  "_from": "uuid-token-generator",
  "_id": "uuid-token-generator@1.0.0",
  "_inBundle": false,
  "_integrity": "sha1-NtsJH2a5TJPwrcJIVo+kc3EWN9s=",
  "_location": "/uuid-token-generator",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "uuid-token-generator",
    "fetchSpec": "latest",
    "name": "uuid-token-generator",
    "raw": "uuid-token-generator",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/uuid-token-generator/-/uuid-token-generator-1.0.0.tgz",
  "_shasum": "36db091f66b94c93f0adc248568fa473711637db",
  "_shrinkwrap": null,
  "_spec": "uuid-token-generator",
  "_where": "D:\\kavi\\mysql\\ctlkart",
  "bugs": {
    "url": "https://github.com/nwoltman/uuid-token-generator/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "uuid": "^3.0.0"
  },
  "deprecated": false,
  "description": "Generates random tokens with custom size and base-encoding using the RFC 4122 v4 UUID algorithm",
  "devDependencies": {
    "coveralls": "^2.11.9",
    "grunt": "^1.0.1",
    "grunt-eslint": "^19.0.0",
    "grunt-mocha-istanbul": "^5.0.1",
    "grunt-mocha-test": "^0.13.2",
    "istanbul": "^0.4.3",
    "jit-grunt": "^0.10.0",
    "mocha": "^3.1.2",
    "should": "^11.1.1"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "LICENSE.txt",
    "index.js"
  ],
  "homepage": "https://github.com/nwoltman/uuid-token-generator",
  "keywords": [
    "generator",
    "random",
    "token",
    "uid",
    "unique",
    "uuid"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "uuid-token-generator",
  "optionalDependencies": {},
  "readme": "# UUID Token Generator\n\n[![NPM Version](https://img.shields.io/npm/v/uuid-token-generator.svg)](https://www.npmjs.com/package/uuid-token-generator)\n[![Build Status](https://travis-ci.org/nwoltman/uuid-token-generator.svg?branch=master)](https://travis-ci.org/nwoltman/uuid-token-generator)\n[![Coverage Status](https://coveralls.io/repos/nwoltman/uuid-token-generator/badge.svg?branch=master&service=github)](https://coveralls.io/github/nwoltman/uuid-token-generator?branch=master)\n[![Dependency Status](https://david-dm.org/nwoltman/uuid-token-generator.svg)](https://david-dm.org/nwoltman/uuid-token-generator)\n[![devDependency Status](https://david-dm.org/nwoltman/uuid-token-generator/dev-status.svg)](https://david-dm.org/nwoltman/uuid-token-generator#info=devDependencies)\n\nProvides a class that generates random tokens with custom size and base-encoding using the [RFC 4122](http://www.ietf.org/rfc/rfc4122.txt) v4 UUID algorithm. Generated tokens are strings that are guaranteed to always be the same length, depending on the [bit-size](#new-tokgeneratorbitsize-baseencoding--object) specified for the token.\n\nGreat for generating things like API keys and compact UIDs.\n\n---\n### WARNING\n---\n\n**This package is no longer being maintained because a better one exists—[uid-generator](https://www.npmjs.com/package/uid-generator)—which is better for the following reasons:**\n\n+ **It has more flexible token generation options**\n  + **i.e. You can specify the length of the token that you'd like to generate**\n+ **It has both a synchronous and asynchronous interface**\n+ **It is less likely to produce colliding tokens**\n+ **It's more performant**\n\n---\n\n\n## Installation\n\n```sh\nnpm install uuid-token-generator --save\n```\n\n\n## Usage\n\n```js\nconst TokenGenerator = require('uuid-token-generator');\n\nconst tokgen = new TokenGenerator(); // Default is a 128-bit token encoded in base58\ntokgen.generate();\n// -> '4QhmRwHwwrgFqXULXNtx4d'\n\nconst tokgen2 = new TokenGenerator(256, TokenGenerator.BASE62);\ntokgen2.generate();\n// -> 'x6GCX3aq9hIT8gjhvO96ObYj0W5HBVTsj64eqCuVc5X'\n```\n\n\n## API\n\n### new TokenGenerator([bitSize][, baseEncoding]) ⇒ `Object`\nCreates a new TokenGenerator instance that generates `bitSize`-bit tokens encoded using the characters in `baseEncoding`.\n\n| Param | Default | Type | Description |\n|:------|:--------|:-----|:------------|\n| [bitSize] | `128` | number | The size of the token to generate in bits. Must be a multiple of 128. |\n| [baseEncoding] | `TokenGenerator.BASE58` | string | One of the `TokenGenerator.BASE##` constants or a custom string of characters to use to encode the token. |\n\n**Example**\n```js\nnew TokenGenerator();\nnew TokenGenerator(256);\nnew TokenGenerator(TokenGenerator.BASE36);\nnew TokenGenerator(512, TokenGenerator.BASE62);\nnew TokenGenerator('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/'); // Custom encoding (base64)\n```\n\n---\n\n### TokenGenerator.BASE16 : `String`\n`0123456789abcdef`\n\n### TokenGenerator.BASE36 : `String`\n`0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ`\n\n### TokenGenerator.BASE58 : `String`\n`123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz`\n\n### TokenGenerator.BASE62 : `String`\n`0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`\n\n### TokenGenerator.BASE66 : `String`\n`0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~`\n\n(all ASCII characters that do not need to be encoded in a URI as specified by [RFC 3986](http://tools.ietf.org/html/rfc3986))\n\n### TokenGenerator.BASE71 : `String`\n`0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!'()*-._~`\n\n(all ASCII characters that are not encoded by `encodeURIComponent()`)\n\n---\n\n### tokgen.generate() ⇒ `String`\nGenerates a random token.\n\n**Returns**: `String` - A random token that is always `tokgen.tokenLength` characters long.\n\n**Example**\n```js\nconst tokgen = new TokenGenerator();\ntokgen.generate();\n// -> 'vf5NrETkUKCa6FhkyRSazD'\n```\n\n---\n\n### (readonly) tokgen.bitSize : `Number`\nThe size of the token that will be generated in bits (the `bitSize` value passed to the `TokenGenerator` constructor).\n\n**Example**\n```js\nnew TokenGenerator().bitSize // -> 128\nnew TokenGenerator(256).bitSize // -> 256\n```\n\n### (readonly) tokgen.baseEncoding : `String`\nThe set of characters used to encode the token (the `baseEncoding` value passed to the `TokenGenerator` constructor).\n\n**Example**\n```js\nnew TokenGenerator().baseEncoding // -> '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\nnew TokenGenerator('abc').baseEncoding // -> 'abc'\n```\n\n### (readonly) tokgen.base : `Number`\nThe base of the token that will be generated (which is the number of characters in the `baseEncoding`).\n\n**Example**\n```js\nnew TokenGenerator().base // -> 58\nnew TokenGenerator(TokenGenerator.BASE62).base // -> 62\nnew TokenGenerator('abc').base // -> 3\n```\n\n### (readonly) tokgen.tokenLength : `Number`\nThe length of the token that will be generated. The generated token will always be this length.  \nCalculated as such: `tokenLength = Math.ceil(bitSize / Math.log2(base))`\n\n**Example**\n```js\nnew TokenGenerator().tokenLength // -> 22\nnew TokenGenerator(256, TokenGenerator.BASE62).tokenLength // -> 43\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nwoltman/uuid-token-generator.git"
  },
  "scripts": {
    "test": "grunt"
  },
  "version": "1.0.0"
}
